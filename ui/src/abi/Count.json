{
  "abi": [
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "setCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_valueA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valueB",
          "type": "uint256"
        }
      ],
      "name": "takeTwoVariables",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Count.sol"
  },
  "ast": {
    "absolutePath": "contracts/Count.sol",
    "exportedSymbols": {
      "Count": [
        48
      ]
    },
    "id": 49,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Count",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 48,
        "linearizedBaseContracts": [
          48
        ],
        "name": "Count",
        "nameLocation": "67:5:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "06661abd",
            "id": 3,
            "mutability": "mutable",
            "name": "count",
            "nameLocation": "94:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 48,
            "src": "79:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "79:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 9,
              "nodeType": "Block",
              "src": "139:24:0",
              "statements": [
                {
                  "expression": {
                    "id": 7,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "149:7:0",
                    "subExpression": {
                      "id": 6,
                      "name": "count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3,
                      "src": "149:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8,
                  "nodeType": "ExpressionStatement",
                  "src": "149:7:0"
                }
              ]
            },
            "functionSelector": "e5071b8e",
            "id": 10,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "incrementCount",
            "nameLocation": "115:14:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "129:2:0"
            },
            "returnParameters": {
              "id": 5,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "139:0:0"
            },
            "scope": 48,
            "src": "106:57:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 25,
              "nodeType": "Block",
              "src": "210:60:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 18,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 16,
                          "name": "_count",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12,
                          "src": "228:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 17,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "237:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "228:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 15,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "220:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 19,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "220:19:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 20,
                  "nodeType": "ExpressionStatement",
                  "src": "220:19:0"
                },
                {
                  "expression": {
                    "id": 23,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 21,
                      "name": "count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3,
                      "src": "249:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 22,
                      "name": "_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12,
                      "src": "257:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "249:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 24,
                  "nodeType": "ExpressionStatement",
                  "src": "249:14:0"
                }
              ]
            },
            "functionSelector": "d14e62b8",
            "id": 26,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setCount",
            "nameLocation": "178:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12,
                  "mutability": "mutable",
                  "name": "_count",
                  "nameLocation": "195:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 26,
                  "src": "187:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "187:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "186:16:0"
            },
            "returnParameters": {
              "id": 14,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "210:0:0"
            },
            "scope": 48,
            "src": "169:101:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 46,
              "nodeType": "Block",
              "src": "352:74:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 37,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 34,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "370:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 35,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "370:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 36,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "382:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "370:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 33,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "362:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "362:22:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39,
                  "nodeType": "ExpressionStatement",
                  "src": "362:22:0"
                },
                {
                  "expression": {
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 40,
                      "name": "count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3,
                      "src": "394:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 43,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 41,
                        "name": "_valueA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28,
                        "src": "402:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 42,
                        "name": "_valueB",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "412:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "402:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "394:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "394:25:0"
                }
              ]
            },
            "functionSelector": "42fe9da9",
            "id": 47,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "takeTwoVariables",
            "nameLocation": "289:16:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28,
                  "mutability": "mutable",
                  "name": "_valueA",
                  "nameLocation": "311:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 47,
                  "src": "306:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "306:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 30,
                  "mutability": "mutable",
                  "name": "_valueB",
                  "nameLocation": "328:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 47,
                  "src": "320:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "320:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "305:31:0"
            },
            "returnParameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "352:0:0"
            },
            "scope": 48,
            "src": "280:146:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 49,
        "src": "58:372:0",
        "usedErrors": []
      }
    ],
    "src": "32:398:0"
  },
  "bytecode": "608060405234801561001057600080fd5b506101b6806100206000396000f3fe60806040526004361061003f5760003560e01c806306661abd1461004457806342fe9da91461006c578063d14e62b814610081578063e5071b8e146100a1575b600080fd5b34801561005057600080fd5b5061005a60005481565b60405190815260200160405180910390f35b61007f61007a3660046100fc565b6100b6565b005b34801561008d57600080fd5b5061007f61009c36600461011e565b6100d4565b3480156100ad57600080fd5b5061007f6100e6565b600034116100c357600080fd5b6100cd818361014d565b6000555050565b600081116100e157600080fd5b600055565b6000805490806100f583610165565b9190505550565b6000806040838503121561010f57600080fd5b50508035926020909101359150565b60006020828403121561013057600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561016057610160610137565b500190565b600060001982141561017957610179610137565b506001019056fea26469706673582212200258a6d0e2957763b1200c9104066127e593a91101f30697a45b8d54992ca28764736f6c63430008090033",
  "bytecodeSha1": "7af9302fbfeec20d4600e856a51bdfc39091a62a",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.9+commit.e5eed63a"
  },
  "contractName": "Count",
  "coverageMap": {
    "branches": {
      "0": {
        "Count.setCount": {
          "6": [
            228,
            238,
            true
          ]
        },
        "Count.takeTwoVariables": {
          "5": [
            370,
            383,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Count.incrementCount": {
          "4": [
            149,
            156
          ]
        },
        "Count.setCount": {
          "2": [
            220,
            239
          ],
          "3": [
            249,
            263
          ]
        },
        "Count.takeTwoVariables": {
          "0": [
            362,
            384
          ],
          "1": [
            394,
            419
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "60806040526004361061003f5760003560e01c806306661abd1461004457806342fe9da91461006c578063d14e62b814610081578063e5071b8e146100a1575b600080fd5b34801561005057600080fd5b5061005a60005481565b60405190815260200160405180910390f35b61007f61007a3660046100fc565b6100b6565b005b34801561008d57600080fd5b5061007f61009c36600461011e565b6100d4565b3480156100ad57600080fd5b5061007f6100e6565b600034116100c357600080fd5b6100cd818361014d565b6000555050565b600081116100e157600080fd5b600055565b6000805490806100f583610165565b9190505550565b6000806040838503121561010f57600080fd5b50508035926020909101359150565b60006020828403121561013057600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561016057610160610137565b500190565b600060001982141561017957610179610137565b506001019056fea26469706673582212200258a6d0e2957763b1200c9104066127e593a91101f30697a45b8d54992ca28764736f6c63430008090033",
  "deployedSourceMap": "58:372:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;79:20;;;;;;;;;;;;;;;;;;;160:25:1;;;148:2;133:18;79:20:0;;;;;;;280:146;;;;;;:::i;:::-;;:::i;:::-;;169:101;;;;;;;;;;-1:-1:-1;169:101:0;;;;;:::i;:::-;;:::i;106:57::-;;;;;;;;;;;;;:::i;280:146::-;382:1;370:9;:13;362:22;;;;;;402:17;412:7;402;:17;:::i;:::-;394:5;:25;-1:-1:-1;;280:146:0:o;169:101::-;237:1;228:6;:10;220:19;;;;;;249:5;:14;169:101::o;106:57::-;149:5;:7;;;:5;:7;;;:::i;:::-;;;;;;106:57::o;196:248:1:-;264:6;272;325:2;313:9;304:7;300:23;296:32;293:52;;;341:1;338;331:12;293:52;-1:-1:-1;;364:23:1;;;434:2;419:18;;;406:32;;-1:-1:-1;196:248:1:o;449:180::-;508:6;561:2;549:9;540:7;536:23;532:32;529:52;;;577:1;574;567:12;529:52;-1:-1:-1;600:23:1;;449:180;-1:-1:-1;449:180:1:o;634:127::-;695:10;690:3;686:20;683:1;676:31;726:4;723:1;716:15;750:4;747:1;740:15;766:128;806:3;837:1;833:6;830:1;827:13;824:39;;;843:18;;:::i;:::-;-1:-1:-1;879:9:1;;766:128::o;899:135::-;938:3;-1:-1:-1;;959:17:1;;956:43;;;979:18;;:::i;:::-;-1:-1:-1;1026:1:1;1015:13;;899:135::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    58,
    430
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6661ABD EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x42FE9DA9 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0xD14E62B8 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0xE5071B8E EQ PUSH2 0xA1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0xFC JUMP JUMPDEST PUSH2 0xB6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7F PUSH2 0x9C CALLDATASIZE PUSH1 0x4 PUSH2 0x11E JUMP JUMPDEST PUSH2 0xD4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7F PUSH2 0xE6 JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCD DUP2 DUP4 PUSH2 0x14D JUMP JUMPDEST PUSH1 0x0 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 DUP1 PUSH2 0xF5 DUP4 PUSH2 0x165 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x160 JUMPI PUSH2 0x160 PUSH2 0x137 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x179 JUMPI PUSH2 0x179 PUSH2 0x137 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL PC 0xA6 0xD0 0xE2 SWAP6 PUSH24 0x63B1200C9104066127E593A91101F30697A45B8D54992CA2 DUP8 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        58,
        430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "LT",
      "path": "0"
    },
    "9": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3F"
    },
    "12": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "13": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "SHR",
      "path": "0"
    },
    "19": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "DUP1",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6661ABD"
    },
    "25": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "EQ",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x44"
    },
    "29": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x42FE9DA9"
    },
    "36": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "EQ",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6C"
    },
    "40": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "DUP1",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD14E62B8"
    },
    "47": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "EQ",
      "path": "0"
    },
    "48": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x81"
    },
    "51": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "52": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "DUP1",
      "path": "0"
    },
    "53": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xE5071B8E"
    },
    "58": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "EQ",
      "path": "0"
    },
    "59": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA1"
    },
    "62": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "63": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "64": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "66": {
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "DUP1",
      "path": "0"
    },
    "67": {
      "first_revert": true,
      "fn": null,
      "offset": [
        58,
        430
      ],
      "op": "REVERT",
      "path": "0"
    },
    "68": {
      "offset": [
        79,
        99
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "69": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "70": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "DUP1",
      "path": "0"
    },
    "71": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x50"
    },
    "75": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "78": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "DUP1",
      "path": "0"
    },
    "79": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "REVERT",
      "path": "0"
    },
    "80": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "81": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "POP",
      "path": "0"
    },
    "82": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5A"
    },
    "85": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "87": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "88": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "DUP2",
      "path": "0"
    },
    "89": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "JUMP",
      "path": "0"
    },
    "90": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "91": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "93": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "94": {
      "op": "SWAP1"
    },
    "95": {
      "op": "DUP2"
    },
    "96": {
      "op": "MSTORE"
    },
    "97": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "99": {
      "op": "ADD"
    },
    "100": {
      "offset": [
        79,
        99
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "102": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "103": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "DUP1",
      "path": "0"
    },
    "104": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "105": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "SUB",
      "path": "0"
    },
    "106": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "107": {
      "fn": null,
      "offset": [
        79,
        99
      ],
      "op": "RETURN",
      "path": "0"
    },
    "108": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "109": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7F"
    },
    "112": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "115": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "116": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "118": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFC"
    },
    "121": {
      "fn": "Count.takeTwoVariables",
      "jump": "i",
      "offset": [
        280,
        426
      ],
      "op": "JUMP",
      "path": "0"
    },
    "122": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "123": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB6"
    },
    "126": {
      "fn": "Count.takeTwoVariables",
      "jump": "i",
      "offset": [
        280,
        426
      ],
      "op": "JUMP",
      "path": "0"
    },
    "127": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "128": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "STOP",
      "path": "0"
    },
    "129": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "130": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "131": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "DUP1",
      "path": "0"
    },
    "132": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "133": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8D"
    },
    "136": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "137": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "139": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "DUP1",
      "path": "0"
    },
    "140": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "REVERT",
      "path": "0"
    },
    "141": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "142": {
      "op": "POP"
    },
    "143": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7F"
    },
    "146": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9C"
    },
    "149": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "150": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "152": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11E"
    },
    "155": {
      "fn": "Count.setCount",
      "jump": "i",
      "offset": [
        169,
        270
      ],
      "op": "JUMP",
      "path": "0"
    },
    "156": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "157": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD4"
    },
    "160": {
      "fn": "Count.setCount",
      "jump": "i",
      "offset": [
        169,
        270
      ],
      "op": "JUMP",
      "path": "0"
    },
    "161": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "162": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "163": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "DUP1",
      "path": "0"
    },
    "164": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "165": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAD"
    },
    "168": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "169": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "171": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "DUP1",
      "path": "0"
    },
    "172": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "REVERT",
      "path": "0"
    },
    "173": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "174": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "POP",
      "path": "0"
    },
    "175": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7F"
    },
    "178": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE6"
    },
    "181": {
      "fn": "Count.incrementCount",
      "jump": "i",
      "offset": [
        106,
        163
      ],
      "op": "JUMP",
      "path": "0"
    },
    "182": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        280,
        426
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "183": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        382,
        383
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x0"
    },
    "185": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        370,
        379
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "186": {
      "branch": 5,
      "fn": "Count.takeTwoVariables",
      "offset": [
        370,
        383
      ],
      "op": "GT",
      "path": "0"
    },
    "187": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        362,
        384
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "190": {
      "branch": 5,
      "fn": "Count.takeTwoVariables",
      "offset": [
        362,
        384
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "191": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        362,
        384
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "193": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        362,
        384
      ],
      "op": "DUP1",
      "path": "0"
    },
    "194": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        362,
        384
      ],
      "op": "REVERT",
      "path": "0"
    },
    "195": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        362,
        384
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "196": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        402,
        419
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 1,
      "value": "0xCD"
    },
    "199": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        412,
        419
      ],
      "op": "DUP2",
      "path": "0"
    },
    "200": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        402,
        409
      ],
      "op": "DUP4",
      "path": "0"
    },
    "201": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        402,
        419
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D"
    },
    "204": {
      "fn": "Count.takeTwoVariables",
      "jump": "i",
      "offset": [
        402,
        419
      ],
      "op": "JUMP",
      "path": "0"
    },
    "205": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        402,
        419
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "206": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        394,
        399
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "208": {
      "fn": "Count.takeTwoVariables",
      "offset": [
        394,
        419
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "209": {
      "op": "POP"
    },
    "210": {
      "op": "POP"
    },
    "211": {
      "fn": "Count.takeTwoVariables",
      "jump": "o",
      "offset": [
        280,
        426
      ],
      "op": "JUMP",
      "path": "0"
    },
    "212": {
      "fn": "Count.setCount",
      "offset": [
        169,
        270
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "213": {
      "fn": "Count.setCount",
      "offset": [
        237,
        238
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x0"
    },
    "215": {
      "fn": "Count.setCount",
      "offset": [
        228,
        234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "216": {
      "branch": 6,
      "fn": "Count.setCount",
      "offset": [
        228,
        238
      ],
      "op": "GT",
      "path": "0"
    },
    "217": {
      "fn": "Count.setCount",
      "offset": [
        220,
        239
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE1"
    },
    "220": {
      "branch": 6,
      "fn": "Count.setCount",
      "offset": [
        220,
        239
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "221": {
      "fn": "Count.setCount",
      "offset": [
        220,
        239
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "223": {
      "fn": "Count.setCount",
      "offset": [
        220,
        239
      ],
      "op": "DUP1",
      "path": "0"
    },
    "224": {
      "fn": "Count.setCount",
      "offset": [
        220,
        239
      ],
      "op": "REVERT",
      "path": "0"
    },
    "225": {
      "fn": "Count.setCount",
      "offset": [
        220,
        239
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "226": {
      "fn": "Count.setCount",
      "offset": [
        249,
        254
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 3,
      "value": "0x0"
    },
    "228": {
      "fn": "Count.setCount",
      "offset": [
        249,
        263
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "229": {
      "fn": "Count.setCount",
      "jump": "o",
      "offset": [
        169,
        270
      ],
      "op": "JUMP",
      "path": "0"
    },
    "230": {
      "fn": "Count.incrementCount",
      "offset": [
        106,
        163
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "231": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        154
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 4,
      "value": "0x0"
    },
    "233": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "234": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "235": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "236": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        154
      ],
      "op": "DUP1",
      "path": "0"
    },
    "237": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF5"
    },
    "240": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "DUP4",
      "path": "0"
    },
    "241": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x165"
    },
    "244": {
      "fn": "Count.incrementCount",
      "jump": "i",
      "offset": [
        149,
        156
      ],
      "op": "JUMP",
      "path": "0"
    },
    "245": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "246": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "247": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "248": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "POP",
      "path": "0"
    },
    "249": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "250": {
      "fn": "Count.incrementCount",
      "offset": [
        149,
        156
      ],
      "op": "POP",
      "path": "0"
    },
    "251": {
      "fn": "Count.incrementCount",
      "jump": "o",
      "offset": [
        106,
        163
      ],
      "op": "JUMP",
      "path": "0"
    },
    "252": {
      "op": "JUMPDEST"
    },
    "253": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "255": {
      "op": "DUP1"
    },
    "256": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "258": {
      "op": "DUP4"
    },
    "259": {
      "op": "DUP6"
    },
    "260": {
      "op": "SUB"
    },
    "261": {
      "op": "SLT"
    },
    "262": {
      "op": "ISZERO"
    },
    "263": {
      "op": "PUSH2",
      "value": "0x10F"
    },
    "266": {
      "op": "JUMPI"
    },
    "267": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "269": {
      "op": "DUP1"
    },
    "270": {
      "op": "REVERT"
    },
    "271": {
      "op": "JUMPDEST"
    },
    "272": {
      "op": "POP"
    },
    "273": {
      "op": "POP"
    },
    "274": {
      "op": "DUP1"
    },
    "275": {
      "op": "CALLDATALOAD"
    },
    "276": {
      "op": "SWAP3"
    },
    "277": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "279": {
      "op": "SWAP1"
    },
    "280": {
      "op": "SWAP2"
    },
    "281": {
      "op": "ADD"
    },
    "282": {
      "op": "CALLDATALOAD"
    },
    "283": {
      "op": "SWAP2"
    },
    "284": {
      "op": "POP"
    },
    "285": {
      "jump": "o",
      "op": "JUMP"
    },
    "286": {
      "op": "JUMPDEST"
    },
    "287": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "289": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "291": {
      "op": "DUP3"
    },
    "292": {
      "op": "DUP5"
    },
    "293": {
      "op": "SUB"
    },
    "294": {
      "op": "SLT"
    },
    "295": {
      "op": "ISZERO"
    },
    "296": {
      "op": "PUSH2",
      "value": "0x130"
    },
    "299": {
      "op": "JUMPI"
    },
    "300": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "302": {
      "op": "DUP1"
    },
    "303": {
      "op": "REVERT"
    },
    "304": {
      "op": "JUMPDEST"
    },
    "305": {
      "op": "POP"
    },
    "306": {
      "op": "CALLDATALOAD"
    },
    "307": {
      "op": "SWAP2"
    },
    "308": {
      "op": "SWAP1"
    },
    "309": {
      "op": "POP"
    },
    "310": {
      "jump": "o",
      "op": "JUMP"
    },
    "311": {
      "op": "JUMPDEST"
    },
    "312": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "317": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "319": {
      "op": "SHL"
    },
    "320": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "322": {
      "op": "MSTORE"
    },
    "323": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "325": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "327": {
      "op": "MSTORE"
    },
    "328": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "330": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "332": {
      "op": "REVERT"
    },
    "333": {
      "op": "JUMPDEST"
    },
    "334": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "336": {
      "op": "DUP3"
    },
    "337": {
      "op": "NOT"
    },
    "338": {
      "op": "DUP3"
    },
    "339": {
      "op": "GT"
    },
    "340": {
      "op": "ISZERO"
    },
    "341": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "344": {
      "op": "JUMPI"
    },
    "345": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "348": {
      "op": "PUSH2",
      "value": "0x137"
    },
    "351": {
      "jump": "i",
      "op": "JUMP"
    },
    "352": {
      "op": "JUMPDEST"
    },
    "353": {
      "op": "POP"
    },
    "354": {
      "op": "ADD"
    },
    "355": {
      "op": "SWAP1"
    },
    "356": {
      "jump": "o",
      "op": "JUMP"
    },
    "357": {
      "op": "JUMPDEST"
    },
    "358": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "360": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "362": {
      "op": "NOT"
    },
    "363": {
      "op": "DUP3"
    },
    "364": {
      "op": "EQ"
    },
    "365": {
      "op": "ISZERO"
    },
    "366": {
      "op": "PUSH2",
      "value": "0x179"
    },
    "369": {
      "op": "JUMPI"
    },
    "370": {
      "op": "PUSH2",
      "value": "0x179"
    },
    "373": {
      "op": "PUSH2",
      "value": "0x137"
    },
    "376": {
      "jump": "i",
      "op": "JUMP"
    },
    "377": {
      "op": "JUMPDEST"
    },
    "378": {
      "op": "POP"
    },
    "379": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "381": {
      "op": "ADD"
    },
    "382": {
      "op": "SWAP1"
    },
    "383": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "def2e48b04e34ff8e226a13a5a7ccd6c4856990b",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\ncontract Count {\n    uint256 public count;\n\n    function incrementCount() public {\n        count++;\n    }\n\n    function setCount(uint256 _count) public {\n        require(_count > 0);\n        count = _count;\n    }\n\n        function takeTwoVariables(uint _valueA, uint256 _valueB) public payable {\n        require(msg.value > 0);\n        count = _valueA + _valueB;\n    }\n\n\n}",
  "sourceMap": "58:372:0:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/Count.sol",
  "type": "contract"
}